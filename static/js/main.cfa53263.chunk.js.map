{"version":3,"sources":["BillboardScreen.js","App.js","serviceWorker.js","index.js"],"names":["BillboardScreen","_ref","text","style","transform","positionX","positionY","callback","delay","repetitions","x","intervalID","window","setInterval","clearInterval","setIntervalX","document","getElementById","scrollLeft","react_default","a","createElement","id","className","MessageForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","clickHandler","bind","assertThisInitialized","changeHandler","event","clickSubmit","setState","target","value","action","onChange","placeholder","rows","type","onClick","Component","Confirmation","clickConfirmation","url","Billboard","_this2","step","setPage","page","console","log","font","context","getTextWidth","canvas","getContext","metrics","measureText","Math","floor","width","src_BillboardScreen","App","_this3","encodeURI","App_MessageForm","App_Confirmation","App_Billboard","size","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfa53263.chunk.js","sourcesContent":["import React from 'react';\n// import './App.css';\n\nfunction BillboardScreen({text, positionX, positionY}) {\n  let style = {\n    transform: 'translate(' + positionX + 'px, ' + positionY + 'px)'\n  }\n\n  function setIntervalX(callback, delay, repetitions) {\n      var x = 0;\n      var intervalID = window.setInterval(function () {\n         callback();\n         if (++x === repetitions) {\n             window.clearInterval(intervalID);\n         }\n      }, delay);\n  }\n\n  setIntervalX(function () {\n      var element = document.getElementById('text_container');\n      element.scrollLeft +=4;\n\n  }, 15, 5000);\n\n  return (\n    <div id=\"text_container\" className=\"container\">\n\n      <h2 id=\"text\" style={style}>{text}</h2>\n    </div>\n    );\n}\n\nexport default BillboardScreen;","import React, { Component } from 'react';\nimport BillboardScreen from './BillboardScreen';\nimport './App.css';\n\nclass MessageForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {message: ''}\n    this.clickHandler = this.clickHandler.bind(this)\n    this.changeHandler = this.changeHandler.bind(this)\n  }\n\n  clickHandler(event) {\n    this.props.clickSubmit(this.state.message);\n  }\n\n  changeHandler(event) {\n    this.setState({message: event.target.value})\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Mobile Billboard</h1>\n        <form action=\"\">\n          <textarea \n            value={this.state.message}\n            onChange={this.changeHandler}\n            placeholder=\"Please enter your message\" rows=\"3\" type=\"text\" id=\"message\"></textarea>\n        </form>\n        <button onClick={this.clickHandler} className=\"button\" id=\"submit\">Submit</button>\n      </div>\n    )\n  }\n}\n\nconst Confirmation = ({clickConfirmation, url}) => {\n  return (\n    <div>\n      <button onClick={clickConfirmation} className=\"button\">Show Billboard</button>\n      <p id=\"link\">{url}</p>\n    </div>\n  )\n}\n\nclass Billboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {step: 1};\n    this.setPage = this.setPage.bind(this);\n    this.positionX = 0;\n    this.positionY = 0;\n    // console.log('length=' + this.getTextWidth(this.props.message, 'normal 20em georgia'));\n  }\n\n  setPage(page) {\n    this.setState({page: page});\n    console.log('page=' +page);\n    this.positionX = -730 * (page-1);\n  }\n\n  getTextWidth(text, font) {\n      // re-use canvas object for better performance\n      var canvas = this.getTextWidth.canvas || (this.getTextWidth.canvas = document.createElement(\"canvas\"));\n      var context = canvas.getContext(\"2d\");\n      context.font = font;\n      var metrics = context.measureText(text);\n      return Math.floor(metrics.width);\n  }\n\n  render() {\n    console.log(this.positionX);\n      return (\n        <div>\n          <BillboardScreen text={this.props.message}\n            positionX={this.positionX}\n            positionY={this.positionY} />\n        </div>\n        )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {step:1, url: '', message: ''}\n    this.clickSubmit = this.clickSubmit.bind(this)\n    this.clickConfirmation = this.clickConfirmation.bind(this)\n  }\n\n  clickSubmit(message) {\n    // send to db\n    console.log('clickSubmit');\n    this.setState({step: 2, url: 'https://mobilebillboard/?message=' + encodeURI(message), message: message})\n  }\n\n  clickConfirmation() {\n    console.log('clickConfirmation');\n    this.setState({step: 3})\n  }\n\n  render() {\n    switch (this.state.step) {\n      case 1:\n        return <MessageForm clickSubmit={this.clickSubmit} />\n      case 2:\n        return <Confirmation clickConfirmation={this.clickConfirmation} url={this.state.url} />\n      case 3:\n        return <Billboard message={this.state.message} size=\"\" />\n      default:\n        return;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}